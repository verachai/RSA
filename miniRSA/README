CIT 595 MiniRSA Project

Name: 
Mengyao Chai (mengyaoc)
Yue Ning (yning)


---------------------
Description
---------------------
This program implements a threaded chat server and client application in Java 6 with the following functions:

1) Secure message communication: utilize the RSA cryptographic algorithm to ensure the confidential communication between the server and the client.
    Procedure:
    - User is required to enter m and n as the indices of 2 prime numbers;
    - Given 2 prime numbers, the server generates a pair of public key and a pair of private key;
    - Once a client is connected to the server, the public key is distributed to the client;
    - Upon receiving the public key, the client encrypts its message using the public key;
    - The encrypted text is passed back to the server;
    - The server uses the private key to decrypt the message.
     
2) Public-key cracking: interrupt other teams' traffic and use brute-force algorithm to crack their public key.
    - User is required to enter a pair of public key published by other teams;
    - The program cracks the public key using brute-force algorithm to obtain the corresponding private key;
    - Once the private key is acquired, other team's ciphertext can be decrypted with the key.


---------------------
Structure
---------------------
Server: Dispatcher/Worker Model
    The multi-threaded server is able to handle asynchronous message reception and delivery. The server and client interact via console interfaces.
    - ChatServer.java: 
        This class creates a server using console interface to get user inputs as well as display client/server communications.
    - Dispatcher.java: 
        This class creates a dispatcher thread when called. The dispatcher thread dispatches each client request to a specific worker thread.
    - Worker.java: 
        This class creates a worker thread to handle a client request when called.

Client: 
    Running the client class in 2 different computers can initiate a chat.
    - ChatClient.java:
        This class creates a client interface to let the user input messages.

Cracker:
    - Cracker.java:
        This class allows the user to input a pair of public keys and then uses brute-force algorithm to guess the private key and decrypt the ciphertext.
    Refer to "Prime Number Retrieval" in the "Algorithms" section for efficient brute-force cracking.
    
RSA:        
    - RSA.java: 
        This class contains several methods to perform the RSA algorithm. To avoid large number overflow, all the methods adopt BigInteger data type.
        - public static BigInteger coprime(BigInteger x): 
        return a random BigInteger which is coprime to the given parameter x.
        - public static BigInteger[] complicatedGCD(BigInteger a, BigInteger b): 
            return an array of 3 elements, say x, y and z, such that x is the GCF of a and b, and x = a * y + b * z.
        - public static BigInteger GCD(BigInteger a, BigInteger b):
            return the greatest common divisor between a and b.
        - public static BigInteger mod_inverse(BigInteger base, BigInteger m):
            return the modular inverse of base mod m.
        - public static BigInteger modulo(BigInteger a, BigInteger b, BigInteger c):
            return a^b mod c.
        - public static long totient(long n):
            return Euler's Totient for the parameter n.
        - public static BigInteger endecrypt(BigInteger msg_or_cipher, BigInteger key, BigInteger c):
            given a BigInteger representing the message or ciphertext, use the keys to either encrypt or decrypt it via the RSA crypto algorithm.
        - public static void loadPrimes():
            load all the prime numbers into the ArrayList from the "Prime Number List.txt" file.
        - public static KeyPair generateKey():
            ask for 2 prime number indices and return a pair of public and private key.     
    - RSAtest.java:
        This class tests the key methods in the above class.

Other auxiliary classes:
    - PrimeGenerator.java:
        This class first generates all the prime numbers less than 2,000,000. If requested, it can continue generate more prime numbers.
    - KeyPair.java:
        This class creates a pair of public key (e, c) and private key (d, c).
    - PubPair.java:
        This class creates a pair of public key (e, c).
    - PriPair.java:
        This class creates a pair of private key (d, c). 
   
    
---------------------
Algorithms
---------------------
1) Prime Number Retrieval:
    - To reduce the time in checking prime numbers, a "Prime Number List.txt" file is first generated which consists of all the prime numbers less than 2,000,000;
    - When the program starts, the file is loaded and an ArrayList is created to store all the prime numbers in the file;
    - When the user inputs an index of the desired prime number, the program first look up in the ArrayList. If the index exceeds the size of ArrayList, the program recursively checks an additional 100,000 number of integers and expands the ArrayList to include the new prime numbers.
    
2) RSA Algorithm:
    - Given 2 prime numbers a and b, compute c = a*b, and m = (a-1)*(b-1);
    - The encryption key, e, is any number coprime to m;
    - The decryption key, d, is the modular inverse of e mod m;
    - Consequently, we obtain public key(e, c) and private key(d, c).
        
3) Brute-force Cracking Algorithm:
    - Given a pair of public key (e, c), starting from the first element in the prime number ArrayList, try to find a factor, p, which is divisible by c.
    - Once p is found, compute q = c / p, m = (p-1)*(q-1), d = mod_inverse(e, m);
    - (d, c) is the desired private key;
    - Use this pair of key to decrypt ciphertext from other teams.


---------------------
Build
---------------------
To build the program, type:
    make
    
You will be notified at the end whether the build is successful or not.
          
          
---------------------
Run
---------------------
1) Server / client:
    - To run the server: (port number is set to 8080 by default)
        make server
    - To run the client on local machine for testing purpose:
        make client 
    - To run the client and communicate with a client on another computer:
        cd bin; java miniRSA.ChatClient <server address> <server port> 
    
2) Cracking:
    make cracker
    
    
---------------------
Clean
---------------------
Type: 
    make clean


---------------------
Repository on GIT
---------------------
URL: https://github.com/verachai/RSA


---------------------
Sample Run
---------------------
- Server:
    Read 148933 primes from file.
    Enter the nth and mth prime number to compute: 
    87313 128723
 
    87313th prime = 1121993, 128723th prime = 1708397
    c = 1916809475221, m = 1916806644832, e = 1861259093169, d = 448010470481
    Public Key = (1861259093169, 1916809475221)
    Private Key = (448010470481, 1916809475221)
    [SYSTEM] Server Started: ServerSocket[addr=0.0.0.0/0.0.0.0,port=0,localport=8080]
    [SYSTEM] "-S" to Shutdown ChatServer.
    
- Client:
    Enter the text, ".bye" to quit: 
    Hello world!
    Receive public key: (1861259093169, 1916809475221)
    
    Plain Text: Hello world!
    Cyper Text: 943950602037 484164955841 1887865244307 1887865244307 577463679058 479762307688 1770394468640 577463679058 657412937559 1887865244307 606053880782 674088025137 
    Cyper Text sent to localhost/127.0.0.1:8080
    
- Server:
    [COMMUNICATION] Received message from /127.0.0.1:49898
    [COMMUNICATION] cyper text: 943950602037 484164955841 1887865244307 1887865244307 577463679058 479762307688 1770394468640 577463679058 657412937559 1887865244307 606053880782 674088025137 
    [COMMUNICATION] plain text: Hello world!
    
- Client:
    Enter the text, ".bye" to quit: 
    )!(@&!*&!!!&#KDJIW8sdw87?/
    Receive public key: (1861259093169, 1916809475221)
    
    Plain Text: )!(@&!*&!!!&#KDJIW8sdw87?/
    Cyper Text: 1220739310769 674088025137 1166373150795 128280210040 167330080561 674088025137 226423934362 167330080561 674088025137 674088025137 674088025137 167330080561 1300520420011 1053185462162 767262466114 320355082561 1376496137619 436929121735 254211406037 21964396575 606053880782 1770394468640 254211406037 1144271090880 1404323427025 1600304004885 
    Cyper Text sent to localhost/127.0.0.1:8080

- Server:
    [COMMUNICATION] Received message from /127.0.0.1:49907
    [COMMUNICATION] cyper text: 1220739310769 674088025137 1166373150795 128280210040 167330080561 674088025137 226423934362 167330080561 674088025137 674088025137 674088025137 167330080561 1300520420011 1053185462162 767262466114 320355082561 1376496137619 436929121735 254211406037 21964396575 606053880782 1770394468640 254211406037 1144271090880 1404323427025 1600304004885 
    [COMMUNICATION] plain text: )!(@&!*&!!!&#KDJIW8sdw87?/
    
- Client:
    Enter the text, ".bye" to quit: 
    .bye


---------------------
Comments
---------------------
1) Prime Number ArrayList:
    - The use of the prime number ArrayList can facilitate prime number checking. Instead of incrementing by 1 in each loop, the program checks potential factors, thus significantly reducing the number of unnecessary checks.
Cons:
    - However, the ArrayList will take up a considerably large amount of memory when a huge prime number is requested.

2) Brute-force Cracking:
    - This algorithm becomes less efficient for large public keys. 
    - Since the encryption is carried out character by character in this program, more sophisticated cracking, such as guessing character frequency and usage, might be more efficient.
    